// Code generated by protoc-gen-go.
// source: sl_route_common.proto
// DO NOT EDIT!

package service_layer

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Route Globals Get Message
type SLRouteGlobalsGetMsg struct {
}

func (m *SLRouteGlobalsGetMsg) Reset()                    { *m = SLRouteGlobalsGetMsg{} }
func (m *SLRouteGlobalsGetMsg) String() string            { return proto.CompactTextString(m) }
func (*SLRouteGlobalsGetMsg) ProtoMessage()               {}
func (*SLRouteGlobalsGetMsg) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

// Route Globals Get Message Response
type SLRouteGlobalsGetMsgRsp struct {
	// Corresponding error code
	ErrStatus *SLErrorStatus `protobuf:"bytes,1,opt,name=ErrStatus" json:"ErrStatus,omitempty"`
	// Max VrfReg objects within a single VrfRegMsg message.
	MaxVrfregPerVrfregmsg uint32 `protobuf:"varint,2,opt,name=MaxVrfregPerVrfregmsg" json:"MaxVrfregPerVrfregmsg,omitempty"`
	// Max Route objects within a single RouteMsg message.
	MaxRoutePerRoutemsg uint32 `protobuf:"varint,3,opt,name=MaxRoutePerRoutemsg" json:"MaxRoutePerRoutemsg,omitempty"`
}

func (m *SLRouteGlobalsGetMsgRsp) Reset()                    { *m = SLRouteGlobalsGetMsgRsp{} }
func (m *SLRouteGlobalsGetMsgRsp) String() string            { return proto.CompactTextString(m) }
func (*SLRouteGlobalsGetMsgRsp) ProtoMessage()               {}
func (*SLRouteGlobalsGetMsgRsp) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *SLRouteGlobalsGetMsgRsp) GetErrStatus() *SLErrorStatus {
	if m != nil {
		return m.ErrStatus
	}
	return nil
}

func (m *SLRouteGlobalsGetMsgRsp) GetMaxVrfregPerVrfregmsg() uint32 {
	if m != nil {
		return m.MaxVrfregPerVrfregmsg
	}
	return 0
}

func (m *SLRouteGlobalsGetMsgRsp) GetMaxRoutePerRoutemsg() uint32 {
	if m != nil {
		return m.MaxRoutePerRoutemsg
	}
	return 0
}

// Route Global Stats Get Message
type SLRouteGlobalStatsGetMsg struct {
}

func (m *SLRouteGlobalStatsGetMsg) Reset()                    { *m = SLRouteGlobalStatsGetMsg{} }
func (m *SLRouteGlobalStatsGetMsg) String() string            { return proto.CompactTextString(m) }
func (*SLRouteGlobalStatsGetMsg) ProtoMessage()               {}
func (*SLRouteGlobalStatsGetMsg) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

// Route Global Stats Get Message Response
type SLRouteGlobalStatsGetMsgRsp struct {
	// Corresponding error code
	ErrStatus *SLErrorStatus `protobuf:"bytes,1,opt,name=ErrStatus" json:"ErrStatus,omitempty"`
	// Num VRFs registered through the service layer.
	VrfCount uint32 `protobuf:"varint,2,opt,name=VrfCount" json:"VrfCount,omitempty"`
	// Num Routes added through the service layer.
	RouteCount uint32 `protobuf:"varint,3,opt,name=RouteCount" json:"RouteCount,omitempty"`
}

func (m *SLRouteGlobalStatsGetMsgRsp) Reset()                    { *m = SLRouteGlobalStatsGetMsgRsp{} }
func (m *SLRouteGlobalStatsGetMsgRsp) String() string            { return proto.CompactTextString(m) }
func (*SLRouteGlobalStatsGetMsgRsp) ProtoMessage()               {}
func (*SLRouteGlobalStatsGetMsgRsp) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

func (m *SLRouteGlobalStatsGetMsgRsp) GetErrStatus() *SLErrorStatus {
	if m != nil {
		return m.ErrStatus
	}
	return nil
}

func (m *SLRouteGlobalStatsGetMsgRsp) GetVrfCount() uint32 {
	if m != nil {
		return m.VrfCount
	}
	return 0
}

func (m *SLRouteGlobalStatsGetMsgRsp) GetRouteCount() uint32 {
	if m != nil {
		return m.RouteCount
	}
	return 0
}

// VRF Registration message
type SLVrfReg struct {
	// VRF Name.
	VrfName string `protobuf:"bytes,1,opt,name=VrfName" json:"VrfName,omitempty"`
	// Default Admin distance for routes programmed by this application
	// Range [0-255]
	// This default value is used if route objects' AdminDistance is 0.
	// Refer to SLRouteCommon
	AdminDistance uint32 `protobuf:"varint,2,opt,name=AdminDistance" json:"AdminDistance,omitempty"`
	// In case the Service Layer -> RIB connection is lost, this specifies the
	// timeout period after which RIB will automatically purge the installed
	// routes, unless the service layer:
	//    1. Re-registers (VRF)
	//    2. Replay all routes
	//    3. And send EOF, before the purge timeout
	VrfPurgeIntervalSeconds uint32 `protobuf:"varint,3,opt,name=VrfPurgeIntervalSeconds" json:"VrfPurgeIntervalSeconds,omitempty"`
}

func (m *SLVrfReg) Reset()                    { *m = SLVrfReg{} }
func (m *SLVrfReg) String() string            { return proto.CompactTextString(m) }
func (*SLVrfReg) ProtoMessage()               {}
func (*SLVrfReg) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{4} }

func (m *SLVrfReg) GetVrfName() string {
	if m != nil {
		return m.VrfName
	}
	return ""
}

func (m *SLVrfReg) GetAdminDistance() uint32 {
	if m != nil {
		return m.AdminDistance
	}
	return 0
}

func (m *SLVrfReg) GetVrfPurgeIntervalSeconds() uint32 {
	if m != nil {
		return m.VrfPurgeIntervalSeconds
	}
	return 0
}

// VRF Registration messages.
type SLVrfRegMsg struct {
	// Registration Operation
	Oper SLRegOp `protobuf:"varint,1,opt,name=Oper,enum=service_layer.SLRegOp" json:"Oper,omitempty"`
	// List of VRF registrations
	VrfRegMsgs []*SLVrfReg `protobuf:"bytes,2,rep,name=VrfRegMsgs" json:"VrfRegMsgs,omitempty"`
}

func (m *SLVrfRegMsg) Reset()                    { *m = SLVrfRegMsg{} }
func (m *SLVrfRegMsg) String() string            { return proto.CompactTextString(m) }
func (*SLVrfRegMsg) ProtoMessage()               {}
func (*SLVrfRegMsg) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{5} }

func (m *SLVrfRegMsg) GetOper() SLRegOp {
	if m != nil {
		return m.Oper
	}
	return SLRegOp_SL_REGOP_RESERVED
}

func (m *SLVrfRegMsg) GetVrfRegMsgs() []*SLVrfReg {
	if m != nil {
		return m.VrfRegMsgs
	}
	return nil
}

// VRF Registration message Result
type SLVrfRegMsgRes struct {
	// Corresponding error code
	ErrStatus *SLErrorStatus `protobuf:"bytes,1,opt,name=ErrStatus" json:"ErrStatus,omitempty"`
	// VRF Name
	VrfName string `protobuf:"bytes,2,opt,name=VrfName" json:"VrfName,omitempty"`
}

func (m *SLVrfRegMsgRes) Reset()                    { *m = SLVrfRegMsgRes{} }
func (m *SLVrfRegMsgRes) String() string            { return proto.CompactTextString(m) }
func (*SLVrfRegMsgRes) ProtoMessage()               {}
func (*SLVrfRegMsgRes) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{6} }

func (m *SLVrfRegMsgRes) GetErrStatus() *SLErrorStatus {
	if m != nil {
		return m.ErrStatus
	}
	return nil
}

func (m *SLVrfRegMsgRes) GetVrfName() string {
	if m != nil {
		return m.VrfName
	}
	return ""
}

// VRF Registration message Response.
type SLVrfRegMsgRsp struct {
	// Summary result of the bulk operation (refer to enum SLErrorStatus)
	// In general, the StatusSummary implies one of 3 things:
	// 1. SL_SUCCESS: signifies that the entire bulk operation was successful.
	//         In this case, the Results list is empty.
	// 2. SL_SOME_ERR: signifies that the operation failed for one or more
	//         entries. In this case, Results holds the result for
	//         each individual entry in the bulk.
	// 3. SL_RPC_XXX: signifies that the entire bulk operation failed.
	//         In this case, the Results list is empty.
	StatusSummary *SLErrorStatus `protobuf:"bytes,1,opt,name=StatusSummary" json:"StatusSummary,omitempty"`
	// In case of errors, this field indicates which entry in the bulk was
	// erroneous.
	Results []*SLVrfRegMsgRes `protobuf:"bytes,2,rep,name=Results" json:"Results,omitempty"`
}

func (m *SLVrfRegMsgRsp) Reset()                    { *m = SLVrfRegMsgRsp{} }
func (m *SLVrfRegMsgRsp) String() string            { return proto.CompactTextString(m) }
func (*SLVrfRegMsgRsp) ProtoMessage()               {}
func (*SLVrfRegMsgRsp) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{7} }

func (m *SLVrfRegMsgRsp) GetStatusSummary() *SLErrorStatus {
	if m != nil {
		return m.StatusSummary
	}
	return nil
}

func (m *SLVrfRegMsgRsp) GetResults() []*SLVrfRegMsgRes {
	if m != nil {
		return m.Results
	}
	return nil
}

// VRF Get Message
type SLVrfRegGetMsg struct {
	// VRF name (key).
	// If the Key is not specified, then request up to the first
	// 'EntriesCount' entries.
	VrfName string `protobuf:"bytes,1,opt,name=VrfName" json:"VrfName,omitempty"`
	// Number of entries requested
	EntriesCount uint32 `protobuf:"varint,2,opt,name=EntriesCount" json:"EntriesCount,omitempty"`
	// if GetNext is FALSE:
	//     request up to 'EntriesCount' entries starting from the key
	// If GetNext is TRUE, or if the key exact match is not found:
	//     request up to 'EntriesCount' entries starting from the key's next
	GetNext bool `protobuf:"varint,3,opt,name=GetNext" json:"GetNext,omitempty"`
}

func (m *SLVrfRegGetMsg) Reset()                    { *m = SLVrfRegGetMsg{} }
func (m *SLVrfRegGetMsg) String() string            { return proto.CompactTextString(m) }
func (*SLVrfRegGetMsg) ProtoMessage()               {}
func (*SLVrfRegGetMsg) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{8} }

func (m *SLVrfRegGetMsg) GetVrfName() string {
	if m != nil {
		return m.VrfName
	}
	return ""
}

func (m *SLVrfRegGetMsg) GetEntriesCount() uint32 {
	if m != nil {
		return m.EntriesCount
	}
	return 0
}

func (m *SLVrfRegGetMsg) GetGetNext() bool {
	if m != nil {
		return m.GetNext
	}
	return false
}

// VRF Get Message Response
type SLVrfRegGetMsgRsp struct {
	// End Of File.
	// When set to True, it indicates that the server has returned M, where
	// M < N, of the original N requested Entries.
	Eof bool `protobuf:"varint,1,opt,name=Eof" json:"Eof,omitempty"`
	// Status of the Get operation
	ErrStatus *SLErrorStatus `protobuf:"bytes,2,opt,name=ErrStatus" json:"ErrStatus,omitempty"`
	// Returned entries as requested in the Get operation.
	// if ErrStatus is SL_SUCCESS, Entries contains the info requested
	Entries []*SLVrfReg `protobuf:"bytes,3,rep,name=Entries" json:"Entries,omitempty"`
}

func (m *SLVrfRegGetMsgRsp) Reset()                    { *m = SLVrfRegGetMsgRsp{} }
func (m *SLVrfRegGetMsgRsp) String() string            { return proto.CompactTextString(m) }
func (*SLVrfRegGetMsgRsp) ProtoMessage()               {}
func (*SLVrfRegGetMsgRsp) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{9} }

func (m *SLVrfRegGetMsgRsp) GetEof() bool {
	if m != nil {
		return m.Eof
	}
	return false
}

func (m *SLVrfRegGetMsgRsp) GetErrStatus() *SLErrorStatus {
	if m != nil {
		return m.ErrStatus
	}
	return nil
}

func (m *SLVrfRegGetMsgRsp) GetEntries() []*SLVrfReg {
	if m != nil {
		return m.Entries
	}
	return nil
}

// VRF Get Stats Message Response
type SLVRFGetStatsMsgRes struct {
	// VRF name as key
	VrfName string `protobuf:"bytes,1,opt,name=VrfName" json:"VrfName,omitempty"`
	// Num VRF Routes added through the service layer.
	RouteCount uint32 `protobuf:"varint,2,opt,name=RouteCount" json:"RouteCount,omitempty"`
}

func (m *SLVRFGetStatsMsgRes) Reset()                    { *m = SLVRFGetStatsMsgRes{} }
func (m *SLVRFGetStatsMsgRes) String() string            { return proto.CompactTextString(m) }
func (*SLVRFGetStatsMsgRes) ProtoMessage()               {}
func (*SLVRFGetStatsMsgRes) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{10} }

func (m *SLVRFGetStatsMsgRes) GetVrfName() string {
	if m != nil {
		return m.VrfName
	}
	return ""
}

func (m *SLVRFGetStatsMsgRes) GetRouteCount() uint32 {
	if m != nil {
		return m.RouteCount
	}
	return 0
}

// VRF Get Stats Message Response
type SLVRFGetStatsMsgRsp struct {
	// End Of File.
	// When set to True, it indicates that the server has returned M, where
	// M < N, of the original N requested Entries.
	Eof bool `protobuf:"varint,1,opt,name=Eof" json:"Eof,omitempty"`
	// Status of the Get Stats operation
	ErrStatus *SLErrorStatus `protobuf:"bytes,2,opt,name=ErrStatus" json:"ErrStatus,omitempty"`
	// Returned entries as requested in the Get Stats operation.
	// if ErrStatus is SL_SUCCESS, Entries contains the info requested
	Entries []*SLVRFGetStatsMsgRes `protobuf:"bytes,3,rep,name=Entries" json:"Entries,omitempty"`
}

func (m *SLVRFGetStatsMsgRsp) Reset()                    { *m = SLVRFGetStatsMsgRsp{} }
func (m *SLVRFGetStatsMsgRsp) String() string            { return proto.CompactTextString(m) }
func (*SLVRFGetStatsMsgRsp) ProtoMessage()               {}
func (*SLVRFGetStatsMsgRsp) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{11} }

func (m *SLVRFGetStatsMsgRsp) GetEof() bool {
	if m != nil {
		return m.Eof
	}
	return false
}

func (m *SLVRFGetStatsMsgRsp) GetErrStatus() *SLErrorStatus {
	if m != nil {
		return m.ErrStatus
	}
	return nil
}

func (m *SLVRFGetStatsMsgRsp) GetEntries() []*SLVRFGetStatsMsgRes {
	if m != nil {
		return m.Entries
	}
	return nil
}

// Common IPv4/IPv6 route attributes.
type SLRouteCommon struct {
	// Adminstrative distance of the route. [0-255].
	// RIB uses this field to break the tie when multiple
	// sources install the same route.
	// Lower distance is preferred over higher distance.
	// The per route object admin distance overrides the default's admin
	// distance set at VRF registration. see SLVrfReg
	AdminDistance uint32 `protobuf:"varint,1,opt,name=AdminDistance" json:"AdminDistance,omitempty"`
	// Local label associated with this route.
	// This is an optional field that can be used to simulatenously setup an
	// ILM entry (e.g. head end of an MPLS LSP) for the same route.
	// This is especially useful when setting up an MPLS LSP (a /32-route
	// towards the remote LSP peer e.g. 2.2.2.2/32) which is required for MPLS
	// VPN labeled routes.
	//
	// Note: MPLS VPN labeled routes can resolve only on:
	//    - /32-routes with valid LocalLabel and a valid egress MPLS path label
	LocalLabel uint32 `protobuf:"varint,2,opt,name=LocalLabel" json:"LocalLabel,omitempty"`
	// Route Tag.
	// Routes are usually tagged to prevent loops during redistribution between
	// protocols.
	Tag uint32 `protobuf:"varint,3,opt,name=Tag" json:"Tag,omitempty"`
}

func (m *SLRouteCommon) Reset()                    { *m = SLRouteCommon{} }
func (m *SLRouteCommon) String() string            { return proto.CompactTextString(m) }
func (*SLRouteCommon) ProtoMessage()               {}
func (*SLRouteCommon) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{12} }

func (m *SLRouteCommon) GetAdminDistance() uint32 {
	if m != nil {
		return m.AdminDistance
	}
	return 0
}

func (m *SLRouteCommon) GetLocalLabel() uint32 {
	if m != nil {
		return m.LocalLabel
	}
	return 0
}

func (m *SLRouteCommon) GetTag() uint32 {
	if m != nil {
		return m.Tag
	}
	return 0
}

// Route Path attributes.
//
// FRR Note:
// Failover from primary to backup is based on the trigger used (e.g.
// link down, BFD, etc.). Revertion is mainly timeout based. The timeout
// value is platform specific and is not configurable.
type SLRoutePath struct {
	// One of IPv4 or IPv6 address
	NexthopAddress *SLIpAddress `protobuf:"bytes,1,opt,name=NexthopAddress" json:"NexthopAddress,omitempty"`
	// Outgoing interface name for the path.
	NexthopInterface *SLInterface `protobuf:"bytes,2,opt,name=NexthopInterface" json:"NexthopInterface,omitempty"`
	// Load metric for this path.
	// Used for equal/unequal cost load balancing of traffic distribution.
	LoadMetric uint32 `protobuf:"varint,3,opt,name=LoadMetric" json:"LoadMetric,omitempty"`
	// Path VRF name. This field is used ONLY if the path is in a different
	// VRF than the route (e.g. VPN cases)
	VrfName string `protobuf:"bytes,4,opt,name=VrfName" json:"VrfName,omitempty"`
	// Route Metric.
	// The metric is typically based on information like load, hop count,
	// MTU, reliability of the path, etc.
	Metric uint32 `protobuf:"varint,5,opt,name=Metric" json:"Metric,omitempty"`
	// Path identifier.
	// Path-id is used to uniquely identify a path when it comes to
	// protection (Fast Re-Route - FRR). It is not used otherwise.
	//
	// In general, for FRR, There are 3 main path attributes:
	//    1. Primary. The path is the main path to carry traffic.
	//    2. Protected. A primary path with a configured backup path.
	//    3. Backup. The path is protecting a primary path.
	//
	// NOTE1: a primary path (A) can be simultaneously protected (by B), and
	// acting as a backup for another path (C).
	// In this example, the primary path C is protected by A (which happens to
	// be primary). So the primary path (A) is Primary, Protected, and Backup.
	//
	// The following are various path types based on combinations of attributes:
	//    1. Pure Primary i.e. Not Protected and is not a Backup.
	//       => PathId is optional. ProtectedPathBitmap = 0x0
	//    2. Primary and Protected. Path is not a Backup.
	//       => PathId is mandatory. ProtectedPathBitmap = 0x0
	//    3. Primary and Not Protected. Path is also a Backup.
	//       => PathId is mandatory. ProtectedPathBitmap = 0xYYYY
	//    4. Primary and Protected. Path is also a Backup.
	//       => PathId is mandatory. ProtectedPathBitmap = 0xYYYY
	//    5. Pure Backup. Protection is not allowed for backup paths.
	//       => PathId is mandatory. ProtectedPathBitmap = 0xYYYY
	//
	// NOTE2: Pure backup path-id uses a different range than primary path-ids.
	// The valid range of primary path IDs, and pure backup path IDS are
	// platform dependent and can be retrieved through the client init message.
	PathId uint32 `protobuf:"varint,6,opt,name=PathId" json:"PathId,omitempty"`
	// Path protection bitmap.
	// The bitmap of paths this Backup path is protecting.
	// Example: If this path is protecting paths with IDs 4, 5 and 6, then
	// set bitmap to:
	// 0x38 ==> 0011 1000
	//            || |-- path 4
	//            ||-- path 5
	//            |-- path 6
	// (1 << (pathId_1 - 1))  | (1 << (pathId_2 - 1)) | (1 << (pathId_3 - 1))
	ProtectedPathBitmap []uint64 `protobuf:"varint,7,rep,packed,name=ProtectedPathBitmap" json:"ProtectedPathBitmap,omitempty"`
	// MPLS label stack.
	// Stack of labels that is pushed when the packet is switched out.
	// Label size is LSB 20 bits. Forwarding will set EXP, TTL and BOS.
	// For primary path, typically only 1 label is used.
	// For backup paths, more than 1 label can be used. If more than one label
	// is used, remote backup addresses must be specified.
	// The maximum number of labels pushed for primary and backup are
	// platform dependent.
	LabelStack []uint32 `protobuf:"varint,8,rep,packed,name=LabelStack" json:"LabelStack,omitempty"`
	// MPLS Remote router backup address.
	// This field is used only for backup MPLS path with more than one label
	// For N+1 backup labels, N remote backup addresses must be specified.
	RemoteAddress []*SLIpAddress `protobuf:"bytes,9,rep,name=RemoteAddress" json:"RemoteAddress,omitempty"`
}

func (m *SLRoutePath) Reset()                    { *m = SLRoutePath{} }
func (m *SLRoutePath) String() string            { return proto.CompactTextString(m) }
func (*SLRoutePath) ProtoMessage()               {}
func (*SLRoutePath) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{13} }

func (m *SLRoutePath) GetNexthopAddress() *SLIpAddress {
	if m != nil {
		return m.NexthopAddress
	}
	return nil
}

func (m *SLRoutePath) GetNexthopInterface() *SLInterface {
	if m != nil {
		return m.NexthopInterface
	}
	return nil
}

func (m *SLRoutePath) GetLoadMetric() uint32 {
	if m != nil {
		return m.LoadMetric
	}
	return 0
}

func (m *SLRoutePath) GetVrfName() string {
	if m != nil {
		return m.VrfName
	}
	return ""
}

func (m *SLRoutePath) GetMetric() uint32 {
	if m != nil {
		return m.Metric
	}
	return 0
}

func (m *SLRoutePath) GetPathId() uint32 {
	if m != nil {
		return m.PathId
	}
	return 0
}

func (m *SLRoutePath) GetProtectedPathBitmap() []uint64 {
	if m != nil {
		return m.ProtectedPathBitmap
	}
	return nil
}

func (m *SLRoutePath) GetLabelStack() []uint32 {
	if m != nil {
		return m.LabelStack
	}
	return nil
}

func (m *SLRoutePath) GetRemoteAddress() []*SLIpAddress {
	if m != nil {
		return m.RemoteAddress
	}
	return nil
}

func init() {
	proto.RegisterType((*SLRouteGlobalsGetMsg)(nil), "service_layer.SLRouteGlobalsGetMsg")
	proto.RegisterType((*SLRouteGlobalsGetMsgRsp)(nil), "service_layer.SLRouteGlobalsGetMsgRsp")
	proto.RegisterType((*SLRouteGlobalStatsGetMsg)(nil), "service_layer.SLRouteGlobalStatsGetMsg")
	proto.RegisterType((*SLRouteGlobalStatsGetMsgRsp)(nil), "service_layer.SLRouteGlobalStatsGetMsgRsp")
	proto.RegisterType((*SLVrfReg)(nil), "service_layer.SLVrfReg")
	proto.RegisterType((*SLVrfRegMsg)(nil), "service_layer.SLVrfRegMsg")
	proto.RegisterType((*SLVrfRegMsgRes)(nil), "service_layer.SLVrfRegMsgRes")
	proto.RegisterType((*SLVrfRegMsgRsp)(nil), "service_layer.SLVrfRegMsgRsp")
	proto.RegisterType((*SLVrfRegGetMsg)(nil), "service_layer.SLVrfRegGetMsg")
	proto.RegisterType((*SLVrfRegGetMsgRsp)(nil), "service_layer.SLVrfRegGetMsgRsp")
	proto.RegisterType((*SLVRFGetStatsMsgRes)(nil), "service_layer.SLVRFGetStatsMsgRes")
	proto.RegisterType((*SLVRFGetStatsMsgRsp)(nil), "service_layer.SLVRFGetStatsMsgRsp")
	proto.RegisterType((*SLRouteCommon)(nil), "service_layer.SLRouteCommon")
	proto.RegisterType((*SLRoutePath)(nil), "service_layer.SLRoutePath")
}

func init() { proto.RegisterFile("sl_route_common.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 716 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x55, 0x41, 0x4f, 0xdb, 0x4a,
	0x10, 0x96, 0x13, 0x1e, 0x09, 0xc3, 0x0b, 0xe2, 0x2d, 0x0f, 0xb0, 0xf2, 0x5e, 0x51, 0x64, 0xf5,
	0x10, 0xf5, 0x80, 0x5a, 0x5a, 0x89, 0xaa, 0xea, 0xa1, 0x40, 0x43, 0x84, 0x94, 0x40, 0xb4, 0xae,
	0x72, 0x8d, 0x16, 0x67, 0x6c, 0xa2, 0xda, 0xb1, 0xb5, 0xbb, 0x41, 0x70, 0xef, 0xb5, 0xb7, 0x56,
	0x3d, 0xf7, 0x87, 0xf4, 0xbf, 0x55, 0xbb, 0xeb, 0x25, 0x31, 0x49, 0x50, 0x2b, 0x7a, 0xca, 0xee,
	0xcc, 0x7c, 0x99, 0xef, 0x9b, 0x9d, 0x19, 0xc3, 0xb6, 0x88, 0x07, 0x3c, 0x9d, 0x48, 0x1c, 0x04,
	0x69, 0x92, 0xa4, 0xe3, 0xfd, 0x8c, 0xa7, 0x32, 0x25, 0x35, 0x81, 0xfc, 0x7a, 0x14, 0xe0, 0x20,
	0x66, 0xb7, 0xc8, 0xeb, 0x2a, 0xca, 0xf8, 0x07, 0xf2, 0x36, 0x43, 0x61, 0xa2, 0xbc, 0x1d, 0xf8,
	0xd7, 0xef, 0x50, 0x85, 0x6e, 0xc7, 0xe9, 0x25, 0x8b, 0x45, 0x1b, 0x65, 0x57, 0x44, 0xde, 0x0f,
	0x07, 0x76, 0x17, 0x39, 0xa8, 0xc8, 0xc8, 0x1b, 0x58, 0x6b, 0x71, 0xee, 0x4b, 0x26, 0x27, 0xc2,
	0x75, 0x1a, 0x4e, 0x73, 0xfd, 0xe0, 0xff, 0xfd, 0x42, 0xb6, 0x7d, 0xbf, 0xd3, 0xe2, 0x3c, 0xcd,
	0x63, 0xe8, 0x34, 0x9c, 0xbc, 0x82, 0xed, 0x2e, 0xbb, 0xe9, 0xf3, 0x90, 0x63, 0xd4, 0x43, 0x6e,
	0x0e, 0x89, 0x88, 0xdc, 0x52, 0xc3, 0x69, 0xd6, 0xe8, 0x62, 0x27, 0x79, 0x0e, 0x5b, 0x5d, 0x76,
	0xa3, 0xd9, 0xf4, 0x90, 0xeb, 0x5f, 0x85, 0x29, 0x6b, 0xcc, 0x22, 0x97, 0x57, 0x07, 0xb7, 0x40,
	0x5f, 0xa5, 0xb7, 0xda, 0xbe, 0x3a, 0xf0, 0xdf, 0x32, 0xe7, 0x63, 0xf5, 0xd5, 0xa1, 0xda, 0xe7,
	0xe1, 0x49, 0x3a, 0x19, 0xcb, 0x5c, 0xd2, 0xdd, 0x9d, 0xec, 0x01, 0xe8, 0xa4, 0xc6, 0x6b, 0xc8,
	0xcf, 0x58, 0xbc, 0x4f, 0x0e, 0x54, 0xfd, 0x4e, 0x9f, 0x87, 0x14, 0x23, 0xe2, 0x42, 0xa5, 0xcf,
	0xc3, 0x73, 0x96, 0xa0, 0xa6, 0xb0, 0x46, 0xed, 0x95, 0x3c, 0x85, 0xda, 0xd1, 0x30, 0x19, 0x8d,
	0xdf, 0x8f, 0x84, 0x64, 0xe3, 0x00, 0xf3, 0x3c, 0x45, 0x23, 0x79, 0x0d, 0xbb, 0x7d, 0x1e, 0xf6,
	0x26, 0x3c, 0xc2, 0xb3, 0xb1, 0x44, 0x7e, 0xcd, 0x62, 0x1f, 0x83, 0x74, 0x3c, 0x14, 0x79, 0xe6,
	0x65, 0x6e, 0x8f, 0xc3, 0xba, 0x65, 0xd1, 0x15, 0x11, 0x79, 0x06, 0x2b, 0x17, 0x19, 0x72, 0xcd,
	0x62, 0xe3, 0x60, 0x67, 0xae, 0x10, 0x14, 0xa3, 0x8b, 0x8c, 0xea, 0x18, 0x72, 0x08, 0x70, 0x07,
	0x14, 0x6e, 0xa9, 0x51, 0x6e, 0xae, 0x1f, 0xec, 0xce, 0x21, 0x4c, 0x08, 0x9d, 0x09, 0xf5, 0x42,
	0xd8, 0x98, 0xc9, 0x49, 0x51, 0x3c, 0xea, 0x11, 0x66, 0x6a, 0x57, 0x2a, 0xd4, 0xce, 0xfb, 0xec,
	0x14, 0x13, 0x89, 0x8c, 0x1c, 0x43, 0xcd, 0xc0, 0xfc, 0x49, 0x92, 0x30, 0x7e, 0xfb, 0x4b, 0xc9,
	0x8a, 0x10, 0x72, 0x08, 0x15, 0x8a, 0x62, 0x12, 0x4b, 0x2b, 0xfa, 0xc9, 0x12, 0xd1, 0x46, 0x1c,
	0xb5, 0xd1, 0xde, 0xd5, 0x94, 0x8e, 0xe9, 0xbf, 0x07, 0xde, 0xdd, 0x83, 0xbf, 0x5b, 0x63, 0xc9,
	0x47, 0x28, 0x66, 0xdb, 0xab, 0x60, 0x53, 0xe8, 0x36, 0xca, 0x73, 0xbc, 0x31, 0xfd, 0x55, 0xa5,
	0xf6, 0xea, 0x7d, 0x71, 0xe0, 0x9f, 0x62, 0x2a, 0x25, 0x7e, 0x13, 0xca, 0xad, 0x34, 0xd4, 0x99,
	0xaa, 0x54, 0x1d, 0x8b, 0x75, 0x2f, 0xfd, 0x5e, 0xdd, 0x5f, 0x40, 0x25, 0x67, 0xe3, 0x96, 0x1f,
	0x7e, 0x7b, 0x1b, 0xe7, 0x5d, 0xc0, 0x96, 0xdf, 0xe9, 0xd3, 0xd3, 0x36, 0x4a, 0x3d, 0x85, 0xf9,
	0xeb, 0x2f, 0xaf, 0x42, 0x71, 0x88, 0x4a, 0x73, 0x43, 0xf4, 0xdd, 0x59, 0xf0, 0x8f, 0x7f, 0x5c,
	0xe9, 0xdb, 0xfb, 0x4a, 0xbd, 0x79, 0xa5, 0xf7, 0x45, 0x4d, 0x45, 0x47, 0x50, 0xcb, 0xf7, 0xcf,
	0x89, 0xde, 0xc8, 0xf3, 0x23, 0xed, 0x2c, 0x1a, 0xe9, 0x3d, 0x80, 0x4e, 0x1a, 0xb0, 0xb8, 0xc3,
	0x2e, 0x31, 0xb6, 0xd2, 0xa7, 0x16, 0x25, 0xf1, 0x03, 0xb3, 0x5b, 0x51, 0x1d, 0xbd, 0x6f, 0x65,
	0x35, 0xcb, 0x66, 0x39, 0x32, 0x79, 0x45, 0x8e, 0x61, 0x43, 0x35, 0xc3, 0x55, 0x9a, 0x1d, 0x0d,
	0x87, 0x1c, 0x85, 0x9d, 0xac, 0xfa, 0x1c, 0xfb, 0x33, 0x1b, 0x41, 0xef, 0x21, 0xc8, 0x29, 0x6c,
	0xe6, 0x16, 0xbd, 0x38, 0x42, 0x96, 0x6f, 0xa0, 0x85, 0xff, 0x62, 0x23, 0xe8, 0x1c, 0xc6, 0xa8,
	0x61, 0xc3, 0x2e, 0x4a, 0x3e, 0x0a, 0xec, 0x36, 0x9c, 0x5a, 0x66, 0x5b, 0x60, 0xa5, 0xd8, 0x02,
	0x3b, 0xb0, 0x9a, 0xa3, 0xfe, 0xd2, 0xa8, 0xfc, 0xa6, 0xec, 0x4a, 0xe5, 0xd9, 0xd0, 0x5d, 0x35,
	0x76, 0x73, 0x53, 0x5f, 0x8f, 0x1e, 0x4f, 0x25, 0x06, 0x12, 0x87, 0xca, 0x74, 0x3c, 0x92, 0x09,
	0xcb, 0xdc, 0x4a, 0xa3, 0xdc, 0x5c, 0xa1, 0x8b, 0x5c, 0x9a, 0x9b, 0x2a, 0xa9, 0x2f, 0x59, 0xf0,
	0xd1, 0xad, 0x36, 0xca, 0x9a, 0xdb, 0x9d, 0x85, 0xbc, 0x83, 0x1a, 0xc5, 0x24, 0x95, 0x68, 0xcb,
	0xb8, 0xa6, 0x9b, 0xe0, 0xa1, 0x32, 0x16, 0x01, 0x97, 0xab, 0xfa, 0xf3, 0xfb, 0xf2, 0x67, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x26, 0x5d, 0x76, 0xea, 0xbd, 0x07, 0x00, 0x00,
}
